reticulate::repl_python()
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# Generate random population data
np.random.seed(1)
pop = np.random.uniform(1, 20, 10000)
k = 1000
n = 10
# Initialize empty lists
means = []
sds = []
count = []
for i in range(k):
samp = np.random.choice(pop, n, replace=True)
means.append(np.mean(samp))
sds.append(np.std(samp))
count.append(len(samp))
SIMS = pd.DataFrame({'means': means, 'sds': sds, 'count': count})
View(SIMS)
# Create a histogram
plt.hist(SIMS['means'], bins=30, edgecolor='black', color='#56B4E9')
plt.xlabel('Distribution of Sample Means')
plt.xlim(0, 20)
plt.show()
# Generate data
x = np.arange(0, 2 * np.pi, 0.1)
y = 2 * np.sin(x)
# Calculate variance
variance_y = np.var(y)
print(variance_y)
# Create a line plot
plt.plot(x, y)
plt.xlabel('X Variable')
plt.ylabel('Y Variable')
plt.show()
plt.clf()
# Generate data
x = np.arange(0, 2 * np.pi, 0.1)
y = 2 * np.sin(x)
# Calculate variance
variance_y = np.var(y)
print(variance_y)
# Create a line plot
plt.plot(x, y)
plt.xlabel('X Variable')
plt.ylabel('Y Variable')
plt.show()
plt.clf()
# Simulate data with noise
np.random.seed(10)
e1 = np.random.normal(0, 1, len(x))
y1 = 2 * np.sin(x) + e1
e2 = np.random.normal(0, 1, len(x))
y2 = 2 * np.sin(x) + e2
DAT2 = pd.DataFrame({'x': x, 'y1': y1, 'y2': y2})
# Calculate mean of y1 and y2
DAT2['mean_y'] = DAT2[['y1', 'y2']].mean(axis=1)
# Print the head of DAT2
print(DAT2.head())
# Calculate the mean of y1 and y2 without using pandas
mean_y = np.mean(DAT2[['y1', 'y2']].values, axis=1)
print(mean_y)
# Loop through columns and calculate ACE and RMSE
iter_colnames = DAT2.columns[1:]
iter_vals = []
ace_vals = []
rmse_vals = []
for colname in iter_colnames:
y_hat = 2 * np.sin(DAT2['x'])
iter_vals.append(colname)
ace_vals.append(np.sum(DAT2[colname] - y_hat) / len(y_hat))
rmse_vals.append(np.sqrt(np.sum((DAT2[colname] - y_hat) ** 2) / len(y_hat)))
SIM_DAT = pd.DataFrame({'iteration': iter_vals, 'ace': ace_vals, 'rmse': rmse_vals})
iter_colnames = DAT2.columns[1:]
iter_vals = []
ace_vals = []
rmse_vals = []
for colname in iter_colnames:
y_hat = 2 * np.sin(DAT2['x'])
iter_vals.append(colname)
ace_vals.append(np.sum(DAT2[colname] - y_hat) / len(y_hat))
rmse_vals.append(np.sqrt(np.sum((DAT2[colname] - y_hat) ** 2) / len(y_hat)))
SIM_DAT = pd.DataFrame({'iteration': iter_vals, 'ace': ace_vals, 'rmse': rmse_vals})
for colname in iter_colnames:
y_hat = 2 * np.sin(DAT2['x'])
iter_vals.append(colname)
ace_vals.append(np.sum(DAT2[colname] - y_hat) / len(y_hat))
rmse_vals.append(np.sqrt(np.sum((DAT2[colname] - y_hat) ** 2) / len(y_hat)))
SIM_DAT = pd.DataFrame({'iteration': iter_vals, 'ace': ace_vals, 'rmse': rmse_vals})
print(SIM_DAT)
# Reshape DAT2 for plotting
DAT2_LONG = DAT2.melt(id_vars='x', value_vars=['y1', 'y2', 'mean_y'], var_name='iteration', value_name='y_val')
DAT2_LONG = DAT2_LONG.sort_values(by=['iteration', 'x'])
# Create a color palette for plotting
cbPalette = ["#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"]
# Plot the data
plt.figure(figsize=(8, 6))
for i, group in DAT2_LONG.groupby('iteration'):
plt.scatter(group['x'], group['y_val'], label=i, s=10, c=cbPalette[i])
plt.xlabel('X Variable')
plt.ylabel('Y Variable')
plt.legend(title='Iteration')
plt.show()
plt.figure(figsize=(8, 6))
for i, group in DAT2_LONG.groupby('iteration'):
plt.scatter(group['x'], group['y_val'], label=i, s=10, c=cbPalette[i])
plt.xlabel('X Variable')
plt.ylabel('Y Variable')
plt.legend(title='Iteration')
plt.show()
print(DAT2_LONG.groupby('iteration'))
DAT2_LONG.groupby('iteration')
DAT2_LONG
DAT2_LONG.head()
for i in DAT2_LONG['iteration'].unique():
iter_data = DAT2_LONG[DAT2_LONG['iteration'] == i]
plt.plot(DAT2_LONG['x'], DAT2_LONG['y_val'],label=i, c=cbPalette[i])
for i in DAT2_LONG['iteration'].unique():
print(i)
plt.figure(figsize=(8, 6))
for i, group in DAT2_LONG.groupby('iteration'):
plt.scatter(group['x'], group['y_val'], label=i, s=10, c=cbPalette[i])
plt.xlabel('X Variable')
plt.ylabel('Y Variable')
plt.legend(title='Iteration')
plt.show()
class(DAT2_long['iteration'])
class(DAT2_LONG['iteration'])
DAT2_LONG['iteration']
plt.figure(figsize=(8, 6))
for i, group in DAT2_LONG.groupby('iteration'):
plt.scatter(group['x'], group['y_val'], label=i, s=10, c=cbPalette[i])
plt.xlabel('X Variable')
plt.ylabel('Y Variable')
plt.legend(title='Iteration')
plt.show()
plt.figure(figsize=(8, 6))
unique_iterations = DAT2_LONG['iteration'].unique()
for i, iteration in enumerate(unique_iterations):
group = DAT2_LONG[DAT2_LONG['iteration'] == iteration]
plt.scatter(group['x'], group['y_val'], label=iteration, s=10, c=cbPalette[i])
plt.xlabel('X Variable')
plt.ylabel('Y Variable')
plt.legend(title='Iteration')
plt.show()
# Plot the data
plt.figure(figsize=(8, 6))
unique_iterations = DAT2_LONG['iteration'].unique()
for i, iteration in enumerate(unique_iterations):
group = DAT2_LONG[DAT2_LONG['iteration'] == iteration]
# Scatter plot
#    plt.scatter(group['x'], group['y_val'], label=iteration, s=10, c=cbPalette[i])
# Line plot
plt.plot(group['x'], group['y_val'], label=iteration, c=cbPalette[i])
plt.xlabel('X Variable')
plt.ylabel('Y Variable')
plt.legend(title='Iteration')
plt.show()
plt.clf()
